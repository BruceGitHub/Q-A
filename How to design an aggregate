---
layout: post
title: "How to design an aggregate "
date: 2022-01-25
tags:
 - [ddd]
 - [architecture]
 - [domain driven design] 
 - [aggregate] 
 - [domain model]
 - [ubiquitus language]
published: true
---

Some links:

- 2019:  All our aggregates are wrong - Mauro Servienti - https://www.youtube.com/watch?v=hev65ozmYPIe
Design around the behaviour. 
Domain expert trap, the domain expert gives some indications upon on its point of view. This isn't the direct "artifact" that go in the code solution
Repo: https://github.com/mauroservienti/all-our-aggregates-are-wrong-demos#ndc-copenhagen

- 2011: Effective Aggregate Design - Vaughn Vernon 
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_2.pdf
https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_3.pdf

- 2017 - Nick Chamberlain - How do We Write Factories for Event Sourced Aggregates?
https://buildplease.com/pages/constructing-aggregates/
Suggests to use a factory to create an AggregateRoot, in particular, suggest to use `ubiquitous language` not `create` for example but `hire` `customer`

- 2009 - Donâ€™t Create Aggregate Roots -  	Udi Dahan
https://udidahan.com/2009/06/29/dont-create-aggregate-roots/
Draft: "Aggregate root isn't entity is a use case"


My answer:
